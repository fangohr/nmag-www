restindex
    crumb: Install method A
    format: rest
    page-title: Installation Manual method A
    include: Yes
    page-description:
      Installation Manual method A - explains how to compile from source
    /description
    build: Yes
/restindex

.. contents:: Table of Contents Installation Method A


==========================================
GUIDE FOR INSTALLING ``nsim`` FROM SOURCES
==========================================

Installation requirements
-------------------------

You will need approximatively 1 GB of free space on your hard disk to
install ``nsim`` (which provides ``nmag``) from sources (~500 MB after
issuing the command ``make clean``). The compilation process will take
anything between approximately 20 minutes to 2 hours, depending on the
hardware of your machine.

You will need the following software to install all the packages which
come with this nsim installation tool:

- A sane build environment:

  - The GNU compiler collection: ``gcc``, ``g++``, ...;
  - ``m4`` (scripting language used by configure scripts generated by ``autoconf``);
  - other standard tools, such as ``make``, ``tar``, ``gzip``, ``bzip2``, ...;

- Libraries for fast linear algebra: ``blas``, ``lapack``;
- ``gawk`` (GNU awk);
- ``readline`` libraries and headers (for ``python``, ``ipython``, ``nsim_i``).

We suggest to install all the required software before proceeding
with the installation of ``nsim``.


Package and platform specific comments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The packages which are more likely to be missing are ``gawk`` and ``readline``.

``gawk`` is a very common program and you should be able to install
it easily with the tools provided by your linux distribution.

``readline`` is not strictly necessary for running nsim scripts.
It is however recommended for ``nsim_i``, the interactive ``nsim`` python shell.

``readline`` is commonly installed on linux systems, but often without
its development files. You can test for its presence checking that the directory
``/usr/include/readline`` exists and that the file ``libreadline.so``
is installed on your system (typically under ``/usr/lib``).
If you find only files such as ``libreadline.so.5``, then it is likely
that the readline library is installed without its development files.
On Debian-like distributions you would then issue the command
``aptitude install libreadline-dev`` to solve the problem.
If after installing ``nsim`` you realise that the prompt of ``nsim_i``
is not coloured and that features such as auto-completition
are not available, then please refer to the section FAQ_.

The GNU compiler collection, as well as ``m4``, ``tar``, ``gzip``, ``bzip2``
should be present if your machine was previously used
for some software development.
They are pretty standard tools and --- as for ``gawk`` --- your
linux distribution should provide an easy way to install them.

The same holds for the ``lapack`` and the ``blas`` libraries.

Debian
++++++

A fresh installation on debian (etch) required the following packages to be installed:
``m4``, ``gawk``, ``libz-dev``, ``g++``, ``refblas3``, ``refblas3-dev``,
``lapack3``, ``lapack3-dev``, ``readline-common``, ``libreadline-dev``.

Mac OS X
++++++++

On Mac OS we used fink_ to install a number of tools needed by ``nsim``
(such as ``gawk``, for example).


Installation
------------

Untar the archive::

 me@my_machine:~$ tar xzvf nmag-0.1.tar.gz

enter the just created directory::


 me@my_machine:~$ cd nmag-0.1

and run ``make``::

  me@my_machine:~/nmag-0.1$ make

This command will build ``nsim`` and a number of other required
packages.  This may take several minutes/hours depending on your
machine: it can take 20/30 minutes on new machines and a few hours on
older machines.

All the software is installed inside the directory ``nmag-0.1``,
so you won't need root privileges (see `Setting up the environment`_).

If all goes well, you will be able to run nsim once the execution of
'make' command has completed::

  me@my_machine:~/nmag-0.1$ ./nsim/bin/nsim

if you see something like::

  >>>

then you have successfully compiled ``nsim`` from source. (Press
CTRL+D to leave the interpreter).


Setting up the environment
~~~~~~~~~~~~~~~~~~~~~~~~~~

Notice that to run ``nsim`` you need to specify
the path where the system can find it. This holds for all the software
provided by the package (``./nsim/bin/ncol`` to run ``ncol``,
``./nsim/bin/nmagpp`` for ``nmagpp``, etc.).  Specifying the full path
of the executables may be annoying.  You can avoid it, with the
following command::

  me@my_machine:~$ cd nmag-0.1  # enter the main nsim directory
  me@my_machine:~/nmag-0.1$ export PATH=`pwd`/nsim/bin:$PATH

This command will allow to launch ``nsim`` simply by typing ``nsim``,
whatever is the directory you are currently in::

  me@my_machine:whatever_directory$ nsim

The ``export`` command however has to be issued every time
you launch a new shell. To avoid this you can add a line to your
bash configuration file (``.bashrc``). In this way the command
will be executed automatically when your shell starts.
Try ``make hints`` to get a suggestion about how to modify
your ``.bashrc`` file::

  me@my_machine:~$ cd nmag-0.1  # enter the main nsim directory
  me@my_machine:~/nmag-0.1$ make hints
  To be able to launch nsim more easily, append the following line
  to the end of your shell configuration file (for BASH users
  this file is .bashrc and can be found on your home directory ~/.bashrc):
  export PATH="/home/me/nmag-0.1/nsim/bin:$PATH"

Note that if you are using a cshell or tcshell, you will have to use
``setenv`` instead of ``export`` to set environment variables.

Testing the software
--------------------

To test the correct compilation of ``nsim`` we suggest to run
a simple ``nsim`` script. To launch the script enter the following
commands in your shell terminal::

  me@my_machine:~$ cd nmag-0.1  # enter the main nsim directory
  me@my_machine:~/nmag-0.1$ cd nsim/unittests/nmag/bigbar
  me@my_machine:~/nmag-0.1$ make check

The script should be executed by ``nsim``. The simulation should
take 5-10 minutes, depending on your machine hardware.
Once the simulation has finished you can check the results
by looking at the produced graph (you need to have gnuplot_ installed
on your system for ``nsim`` to be able to produce the graph)::

  me@my_machine:~/nmag-0.1/nsim/unittests/nmag/bigbar$ gv results/results.eps

The graph should show the time evolution of the three components
of the mean magnetization for a Permalloy bar of size 100x100x30 nm.
The graph shows the results of the same system simulated also using OOMMF
and Magpar: you should see good agreement between the three
micromagnetic packages.


Removing the software
---------------------

When the installation is completed, you can remove the unnecessary files
typing the command ``make clean`` under the directory ``nmag-0.1``.
If you want to remove also the files necessary for ``nsim`` to be executed,
then type ``make uninstall`` under the directory ``nmag-0.1``.
These commands will simply remove the directories created during
the installation process. The latter will remove also the libraries
and the binary files created during the installation process.
Hence be careful! If you execute it, then you need to restart
the installation process in order to restore the functionality of ``nsim``.
If you really want to remove every nsim-thing, just remove the directory
``nmag-0.1``::

  me@my_machine:~/nmag-0.1$ cd ..
  me@my_machine:~$ rm -rf nmag-0.1

Remember that the installation process does everything
inside this directory! It does not touch any other file or directory
outside it! (the directory /tmp may be an exception, though)


Has been compiled on
--------------------

The software has been compiled successfully (and without intervention) on the following systems:

   - IntelMac (=CoreDuo CPU in MacBook) Mac OS X (10.4) system;

   - PowerPC Mac (MacMini, iMac) Mac OS X (10.4) system;

   - AMD Athlon 64 (running in 32bit mode) with Debian Linux (Etch);

   - Opteron machine running 64bit linux;

   - Pentium 3 machine running 32bit linux;

   - Pentium M machine running 32bit Ubuntu Linux (Gutsy);

Please let us know (by email to `nsim developers`_) if you have
compiled it on other system configurations.



.. _FAQ:

FAQ (Frequently Asked Questions)
--------------------------------

:Q: What is all this talk about ``nsim`` --- I was interested in ``nmag``?

:A: ``nsim`` is a general purpose multiphysics simulation
    package. ``nmag`` is particular application based on it.
    The major effort is to install ``nsim``. Once this is done
    ``nmag`` will ''just work''. It is for this reason, that you see
    references to ``nsim`` in this document, although you are interested
    in ``nmag``.


:Q: On what machines/operating systems does nsim compile?

:A: This installation tool was designed to work on Linux platforms.
   It does not work on MS Windows, but it has been successfully used
   to compile ``nsim`` on Mac (both PowerPC and Intel architectures)
   and may work under other flavours of unix OSes.

   See `Has been compiled on`_ for a list of configurations on which 
   a successful compilation has been reported.



:Q: I have just installed ``nsim``. ``nsim_i`` works, but the output
   is not coloured and the auto-completition  is not avalable.
   What is happening?

:A: You probably have compiled ``nsim`` without having installed properly
   the readline library: ``nsim_i`` needs this library for features
   such as the command auto-completition and coloured text.
   You need to install both readline and the readline development package,
   as explained in the section `Installation requirements`_.
   This however won't fix the problem. You need also to re-compile
   ``nsim`` again (see the next question-answer).
   A better (and much faster) approach is the following::

     me@my_machine:~$ cd nmag-0.1  # enter the main nsim directory
     me@my_machine:~/nmag-0.1$ rm -rf .deps_python_* python/
     me@my_machine:~/nmag-0.1$ make .deps_python_install
     me@my_machine:~/nmag-0.1$ make --dry-run | grep touch | sh

   These commands will recompile only python.
   The last line is necessary to update the dependency files:
   normally rebuilding ``python`` would cause all the other libraries
   (mpich, petsc, etc.) to be rebuilt as well, the last line
   is a trick to avoid this!

:Q: How can I recompile the ``nsim`` package, *together with all the
   required libraries*?

:A: Normally you should not need to recompile the ``nsim`` package.
   If for some reasons you want to do so, you can issue the following
   commands::

     me@my_machine:~$ cd nmag-0.1  # enter the main nsim directory
     me@my_machine:~/nmag-0.1$ make uninstall
     me@my_machine:~/nmag-0.1$ make 

   Be careful! ``make uninstall`` will remove all the files produced
   by the previous compilation of ``nsim`` (if there was one!).
   All the programs and libraries required by ``nsim`` will
   be rebuilt with these commands.

:Q: I compiled ``nsim`` from source and it occupied more than 1 GB
   of space in my hard-drive. Are there unnecessary files that
   I can remove to get back some free space?

:A: Yes, some directories which were necessary for the compilation
   can be removed after the compilation has finished.
   You only need to type::

     me@my_machine:~$ cd nmag-0.1 # enter the main nsim directory
     me@my_machine:~/nmag-0.1$ make clean

   This will give you back 0.5 GB of free space.

:Q: I noticed that the installation of ``nsim`` produced many executables
   under the directory ``.../nmag-0.1/bin``. I tried to run some of
   these, but they don't work properly.
   Is there something wrong with the installation?

:A: No, probably everything is alright.  The software is not installed
   in the traditional unix directories (``/usr/bin``, ``/usr/lib``,
   etc.) therefore your operating system needs to be instructed where
   to find executables, libraries, etc.  ``nsim`` does that by calling
   the shell script
   ``.../nmag-0.1/exports.bash``.
   If you want to execute (for some strange reasons) the binary
   files under ``.../nmag-0.1/bin`` you need to do the same.
   For example, if you want to launch OCaml (the objective caml shell)
   you should use the following commands::

     me@my_machine:~$ cd nmag-0.1 # enter the main nsim directory
     me@my_machine:~/nmag-0.1$ . exports.bash
     me@my_machine:~/nmag-0.1$ ./bin/ocaml
 
   This may not be necessary, but is strongly suggested.
   (note that here we are using the syntax for the bash shell)

:Q: I want to recompile only ``nsim``, how can I do this?

:A: This shouldn't be necessary for normal users. If you are a developer
   and you are extending the ``nsim`` OCaml core, then this is what
   you need::

     me@my_machine:~$ cd nmag-0.1 # enter the main nsim directory
     me@my_machine:~/nmag-0.1$ . exports.bash
     me@my_machine:~/nmag-0.1$ cd nsim # enter the nsim source directory
     me@my_machine:~/nmag-0.1$ make

   For other info and hints write a mail to the `nsim developers`_,
   we will be happy to help you!

Known issues
------------

(None at the moment)

.. _fink: http://finkproject.org/
.. _`nsim developers`: fangohr@soton.ac.uk
.. _gnuplot: http://www.gnuplot.info/
